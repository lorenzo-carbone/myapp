/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.demo.myapp.model.impl;

import com.liferay.demo.myapp.model.Myapp;
import com.liferay.demo.myapp.model.MyappModel;
import com.liferay.demo.myapp.model.MyappSoap;
import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Myapp service. Represents a row in the &quot;MyApp_Myapp&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>MyappModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MyappImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see MyappImpl
 * @generated
 */
@JSON(strict = true)
public class MyappModelImpl extends BaseModelImpl<Myapp> implements MyappModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a myapp model instance should use the <code>Myapp</code> interface instead.
	 */
	public static final String TABLE_NAME = "MyApp_Myapp";

	public static final Object[][] TABLE_COLUMNS = {
		{"myappId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"title", Types.VARCHAR},
		{"description", Types.VARCHAR}, {"articleId", Types.BIGINT},
		{"status", Types.INTEGER}, {"statusByUserId", Types.BIGINT},
		{"statusByUserName", Types.VARCHAR}, {"statusDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("myappId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("articleId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table MyApp_Myapp (myappId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,title VARCHAR(75) null,description VARCHAR(75) null,articleId LONG,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table MyApp_Myapp";

	public static final String ORDER_BY_JPQL = " ORDER BY myapp.title ASC";

	public static final String ORDER_BY_SQL = " ORDER BY MyApp_Myapp.title ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long GROUPID_COLUMN_BITMASK = 1L;

	public static final long USERID_COLUMN_BITMASK = 2L;

	public static final long TITLE_COLUMN_BITMASK = 4L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Myapp toModel(MyappSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Myapp model = new MyappImpl();

		model.setMyappId(soapModel.getMyappId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setTitle(soapModel.getTitle());
		model.setDescription(soapModel.getDescription());
		model.setArticleId(soapModel.getArticleId());
		model.setStatus(soapModel.getStatus());
		model.setStatusByUserId(soapModel.getStatusByUserId());
		model.setStatusByUserName(soapModel.getStatusByUserName());
		model.setStatusDate(soapModel.getStatusDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Myapp> toModels(MyappSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Myapp> models = new ArrayList<Myapp>(soapModels.length);

		for (MyappSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public MyappModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _myappId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setMyappId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _myappId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Myapp.class;
	}

	@Override
	public String getModelClassName() {
		return Myapp.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Myapp, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Myapp, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Myapp, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Myapp)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Myapp, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Myapp, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Myapp)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Myapp, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Myapp, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Myapp>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Myapp.class.getClassLoader(), Myapp.class, ModelWrapper.class);

		try {
			Constructor<Myapp> constructor =
				(Constructor<Myapp>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Myapp, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Myapp, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Myapp, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Myapp, Object>>();
		Map<String, BiConsumer<Myapp, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Myapp, ?>>();

		attributeGetterFunctions.put("myappId", Myapp::getMyappId);
		attributeSetterBiConsumers.put(
			"myappId", (BiConsumer<Myapp, Long>)Myapp::setMyappId);
		attributeGetterFunctions.put("groupId", Myapp::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Myapp, Long>)Myapp::setGroupId);
		attributeGetterFunctions.put("companyId", Myapp::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<Myapp, Long>)Myapp::setCompanyId);
		attributeGetterFunctions.put("userId", Myapp::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<Myapp, Long>)Myapp::setUserId);
		attributeGetterFunctions.put("userName", Myapp::getUserName);
		attributeSetterBiConsumers.put(
			"userName", (BiConsumer<Myapp, String>)Myapp::setUserName);
		attributeGetterFunctions.put("createDate", Myapp::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<Myapp, Date>)Myapp::setCreateDate);
		attributeGetterFunctions.put("modifiedDate", Myapp::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate", (BiConsumer<Myapp, Date>)Myapp::setModifiedDate);
		attributeGetterFunctions.put("title", Myapp::getTitle);
		attributeSetterBiConsumers.put(
			"title", (BiConsumer<Myapp, String>)Myapp::setTitle);
		attributeGetterFunctions.put("description", Myapp::getDescription);
		attributeSetterBiConsumers.put(
			"description", (BiConsumer<Myapp, String>)Myapp::setDescription);
		attributeGetterFunctions.put("articleId", Myapp::getArticleId);
		attributeSetterBiConsumers.put(
			"articleId", (BiConsumer<Myapp, Long>)Myapp::setArticleId);
		attributeGetterFunctions.put("status", Myapp::getStatus);
		attributeSetterBiConsumers.put(
			"status", (BiConsumer<Myapp, Integer>)Myapp::setStatus);
		attributeGetterFunctions.put(
			"statusByUserId", Myapp::getStatusByUserId);
		attributeSetterBiConsumers.put(
			"statusByUserId",
			(BiConsumer<Myapp, Long>)Myapp::setStatusByUserId);
		attributeGetterFunctions.put(
			"statusByUserName", Myapp::getStatusByUserName);
		attributeSetterBiConsumers.put(
			"statusByUserName",
			(BiConsumer<Myapp, String>)Myapp::setStatusByUserName);
		attributeGetterFunctions.put("statusDate", Myapp::getStatusDate);
		attributeSetterBiConsumers.put(
			"statusDate", (BiConsumer<Myapp, Date>)Myapp::setStatusDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getMyappId() {
		return _myappId;
	}

	@Override
	public void setMyappId(long myappId) {
		_myappId = myappId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_columnBitmask = -1L;

		_title = title;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public long getArticleId() {
		return _articleId;
	}

	@Override
	public void setArticleId(long articleId) {
		_articleId = articleId;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_status = status;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Myapp.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Myapp toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Myapp>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MyappImpl myappImpl = new MyappImpl();

		myappImpl.setMyappId(getMyappId());
		myappImpl.setGroupId(getGroupId());
		myappImpl.setCompanyId(getCompanyId());
		myappImpl.setUserId(getUserId());
		myappImpl.setUserName(getUserName());
		myappImpl.setCreateDate(getCreateDate());
		myappImpl.setModifiedDate(getModifiedDate());
		myappImpl.setTitle(getTitle());
		myappImpl.setDescription(getDescription());
		myappImpl.setArticleId(getArticleId());
		myappImpl.setStatus(getStatus());
		myappImpl.setStatusByUserId(getStatusByUserId());
		myappImpl.setStatusByUserName(getStatusByUserName());
		myappImpl.setStatusDate(getStatusDate());

		myappImpl.resetOriginalValues();

		return myappImpl;
	}

	@Override
	public int compareTo(Myapp myapp) {
		int value = 0;

		value = getTitle().compareTo(myapp.getTitle());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Myapp)) {
			return false;
		}

		Myapp myapp = (Myapp)obj;

		long primaryKey = myapp.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		MyappModelImpl myappModelImpl = this;

		myappModelImpl._originalGroupId = myappModelImpl._groupId;

		myappModelImpl._setOriginalGroupId = false;

		myappModelImpl._originalUserId = myappModelImpl._userId;

		myappModelImpl._setOriginalUserId = false;

		myappModelImpl._setModifiedDate = false;

		myappModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Myapp> toCacheModel() {
		MyappCacheModel myappCacheModel = new MyappCacheModel();

		myappCacheModel.myappId = getMyappId();

		myappCacheModel.groupId = getGroupId();

		myappCacheModel.companyId = getCompanyId();

		myappCacheModel.userId = getUserId();

		myappCacheModel.userName = getUserName();

		String userName = myappCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			myappCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			myappCacheModel.createDate = createDate.getTime();
		}
		else {
			myappCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			myappCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			myappCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		myappCacheModel.title = getTitle();

		String title = myappCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			myappCacheModel.title = null;
		}

		myappCacheModel.description = getDescription();

		String description = myappCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			myappCacheModel.description = null;
		}

		myappCacheModel.articleId = getArticleId();

		myappCacheModel.status = getStatus();

		myappCacheModel.statusByUserId = getStatusByUserId();

		myappCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = myappCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			myappCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			myappCacheModel.statusDate = statusDate.getTime();
		}
		else {
			myappCacheModel.statusDate = Long.MIN_VALUE;
		}

		return myappCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Myapp, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Myapp, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Myapp, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Myapp)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Myapp, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Myapp, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Myapp, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Myapp)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Myapp>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _myappId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _title;
	private String _description;
	private long _articleId;
	private int _status;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;
	private long _columnBitmask;
	private Myapp _escapedModel;

}